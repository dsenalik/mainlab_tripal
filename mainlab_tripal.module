<?php

/**
 * @defgroup mainlab_tripal Library
 * @{
 * Provides functions for display and management of data in custom tables
 * @}
 * @ingroup tripal_modules
 */

require_once "includes/custom_schema.inc";



/**
 * Provide information to drupal about the node types that we're creating
 * in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_node_info() {
  $nodes = array();

  return $nodes;
}

/**
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation, editing and deleting of chado
 * data objects
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_perm() {
  return array(

  );
}
/**
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_menu() {
  $items = array();
  

  return $items;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * Administrative settings form
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_admin() {
  $form = array();



  return system_settings_form($form);
}

/**
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_admin_validate($form, &$form_state) {
 
}

/**
 * Implementation of hook_nodeapi().
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_nodeapi(&$node, $op, $teaser, $page) {

 
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_theme() {
	$path = drupal_get_path('module', 'mainlab_tripal') . '/theme';
	
  $themes = array(
    'tripal_organism_relationships' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_organism_relationships',
      'path' => $path . '/tripal_organism',    
    ),
  );
  return $themes;
}


/**
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_cron() {

}

/**
 *
 *
 * @ingroup tripal_organism
 */
function tripal_organism_preprocess_tripal_organism_relationships(&$variables) {
  // we want to provide a new variable that contains the matched organisms.
  $organism = $variables['node']->organism;
   
  // expand the organism object to include the organism relationships.
  $options = array(
    'return_array' => 1,
    'statement_name' => 'exp_organism_rels'
  );
  $organism = tripal_core_expand_chado_vars($organism,'table', 'organism_relationship', $options);

  // get the subject relationships
  $srelationships = $organism->organism_relationship->subject_id;
  if (!$srelationships) {
     $srelationships = array();
  } 
  elseif (!is_array($srelationships)) { 
     $srelationships = array($srelationships); 
  }
  
  // get the object relationships
  $orelationships = $organism->organism_relationship->object_id;
  if (!$orelationships) {
     $orelationships = array();
  } 
  elseif (!is_array($orelationships)) { 
     $orelationships = array($orelationships); 
  }
  
  // combine both object and subject relationshisp into a single array
  $relationships = array();
  $relationships['object'] = array();
  $relationships['subject'] = array();
  
   // iterate through the object relationships
   foreach ($orelationships as $relationship) {
     $rel = new stdClass();      
     $rel->record = $relationship;    
     
     // get the relationship and child types
     $rel_type = t(preg_replace('/_/'," ",$relationship->type_id->name));
     $child_type = $relationship->subject_id->type_id->name;
     
     // get the node id of the subject
     $sql = "SELECT nid FROM chado_organism WHERE organism_id = %d";
     $n = db_fetch_object(db_query($sql,$relationship->subject_id->organism_id));
     if($n){
        $rel->record->nid = $n->nid;
     }

     if (!array_key_exists($rel_type, $relationships['object'])) {
       $relationships['object'][$rel_type] = array();   
     }
     if (!array_key_exists($child_type, $relationships['object'][$rel_type])) {
       $relationships['object'][$rel_type][$child_type] = array();   
     }
     $relationships['object'][$rel_type][$child_type][] = $rel;     
  }

  
  // now add in the subject relationships
  foreach ($srelationships as $relationship) {
     $rel = new stdClass(); 
     
     $rel->record = $relationship;
     $rel_type = t(preg_replace('/_/'," ",$relationship->type_id->name));
     $parent_type = $relationship->object_id->type_id->name;
     
     // get the node id of the subject
     $sql = "SELECT nid FROM chado_organism WHERE organism_id = %d";
     $n = db_fetch_object(db_query($sql,$relationship->object_id->organism_id));
     if($n){
        $rel->record->nid = $n->nid;
     }
     
     if (!array_key_exists($rel_type, $relationships['subject'])) {
       $relationships['subject'][$rel_type] = array();   
     }
     if (!array_key_exists($child_type, $relationships['subject'][$rel_type])) {
       $relationships['subject'][$rel_type][$parent_type] = array();   
     }
     $relationships['subject'][$rel_type][$parent_type][] = $rel;
  }
  
  $organism->all_relationships = $relationships;

}