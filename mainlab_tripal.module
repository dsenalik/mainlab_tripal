<?php

/**
 * @defgroup mainlab_tripal Library
 * @{
 * Provides functions for display and management of data in custom tables
 * @}
 * @ingroup tripal_modules
 */

require_once "includes/custom_schema.inc";



/**
 * Provide information to drupal about the node types that we're creating
 * in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_node_info() {
  $nodes = array();

  return $nodes;
}

/**
 * Set the permission types that the chado module uses.  Essentially we
 * want permissionis that protect creation, editing and deleting of chado
 * data objects
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_perm() {
  return array(

  );
}
/**
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_menu() {
  $items = array();
  

  return $items;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_views_api() {
  return array(
    'api' => 2.0,
  );
}


/**
 * Administrative settings form
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_admin() {
  $form = array();



  return system_settings_form($form);
}

/**
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_admin_validate($form, &$form_state) {
 
}

/**
 * Implementation of hook_nodeapi().
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_nodeapi(&$node, $op, $teaser, $page) {

 
}

/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_theme() {
	$path = drupal_get_path('module', 'mainlab_tripal') . '/theme';
	
  $themes = array(
    'tripal_organism_relationships' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_organism_relationships',
      'path' => $path . '/tripal_organism',    
    ),
    'tripal_organism_properties' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_organism_properties',
      'path' => $path . '/tripal_organism',    
    ),
    'tripal_organism_maps' => array(
      'arguments' => array('node' => NULL),
      'template' => 'tripal_organism_maps',
      'path' => $path . '/tripal_organism',    
    ),
  );
  return $themes;
}


/**
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_cron() {

}

/**
 *
 *
 * @ingroup tripal_organism
 */
function tripal_organism_preprocess_tripal_organism_relationships(&$variables) {
  // we want to provide a new variable that contains the matched organisms.
  $organism = $variables['node']->organism;
  
  // normally we would use tripal_core_expand_chado_vars to expand our
  // organism object and add in the relationships, however whan a large
  // number of relationships are present this significantly slows the
  // query, therefore we will manually perform the query
  $sql = "
    SELECT O.genus, O.species, O.organism_id, CO.nid, CVT.name as rel_type
    FROM organism_relationship ORel
      INNER JOIN organism O on ORel.subject_organism_id = O.organism_id
      INNER JOIN cvterm CVT on ORel.type_id = CVT.cvterm_id
      LEFT JOIN chado_organism CO on O.organism_id = CO.organism_id
    WHERE ORel.subject_organism_id = %d      
  ";
  $as_subject = chado_query($sql,$organism->organism_id);
  $sql = "
    SELECT O.genus, O.species, O.organism_id, CO.nid, CVT.name as rel_type
    FROM organism_relationship ORel
      INNER JOIN organism O on ORel.object_organism_id = O.organism_id
      INNER JOIN cvterm CVT on ORel.type_id = CVT.cvterm_id
      LEFT JOIN chado_organism CO on O.organism_id = CO.organism_id
    WHERE ORel.object_organism_id = %d      
  ";
  $as_object = chado_query($sql,$organism->organism_id);   
  
  // combine both object and subject relationshisp into a single array
  $relationships = array();
  $relationships['object'] = array();
  $relationships['subject'] = array();
  
   // iterate through the object relationships
   while ($relationship = db_fetch_object($as_object)) {
     $rel = new stdClass();      
     $rel->record = $relationship;    
     
     // get the relationship and child types
     $rel_type = t(preg_replace('/_/'," ",$relationship->rel_type));     

     if (!array_key_exists($rel_type, $relationships['object'])) {
       $relationships['object'][$rel_type] = array();   
     }    
  }
  
   while ($relationship = db_fetch_object($as_subject)) {
     $rel = new stdClass();      
     $rel->record = $relationship;    
     
     // get the relationship and child types
     $rel_type = t(preg_replace('/_/'," ",$relationship->rel_type));     

     if (!array_key_exists($rel_type, $relationships['subject'])) {
       $relationships['subject'][$rel_type] = array();   
     }    
  } 
  
  $organism->all_relationships = $relationships;

}