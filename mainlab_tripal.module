<?php

/**
 * @defgroup mainlab_tripal Library
 * @{
 * Provides functions for display and management of data in custom tables
 * @}
 * @ingroup tripal_modules
 */

require_once "includes/simple_seq_extract.inc";
require_once "includes/stock_listing.page.inc";

require_once 'theme/mainlab_tripal.theme.inc';

/**
 *
 * @ingroup tripal_feature
 */
function mainlab_tripal_init() {
  drupal_add_css(drupal_get_path('module', 'mainlab_tripal') . '/theme/mainlab/css/mainlab_tripal.css');
}

/**
 * Menu items are automatically added for the new node types created
 * by this module to the 'Create Content' Navigation menu item.  This function
 * adds more menu items needed for this module.
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_menu() {
  $items = array();
  
  $items['admin/mainlab_tripal'] = array(
    'title' => 'Mainlab Tripal',
    'description' => ('Settings for the mainlab tripal custom displays.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mainlab_tripal_admin_form'),
    'access arguments' => array('administer tripal'),
    'file' => 'includes/mainlab_tripal.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // the custom sequence retrieval form
  $items['retrieve/sequences'] = array(
    'title' => 'Sequence Retrieval',
    'description' => 'Download a file of sequences',
    'page callback' => 'mainlab_tripal_seq_extract_page',
    'access arguments' => array('access chado_feature content'),
    'type' => MENU_CALLBACK,
  );
  

  // The polymorphism page
  $items['polymorphism/%'] = array(
  		'title' => 'Polymorphism',
  		'page callback' => 'mainlab_show_polymorphism',
  		'page arguments' => array(1),
  		'access arguments' => array('access content'),
  		'file' => 'includes/polymorphism.page.inc',
  		'type' => MENU_CALLBACK
  );
  // The allele page
  $items['allele/%/%/%'] = array(
  		'title' => 'Allele',
  		'page callback' => 'mainlab_show_allele',
  		'page arguments' => array(1,2,3),
  		'access arguments' => array('access content'),
  		'file' => 'includes/allele.page.inc',
  		'type' => MENU_CALLBACK
  );
  
  // The sequence listing page
  $items['feature_listing/%/%/%'] = array(
  		'title' => 'Sequences',
  		'page callback' => 'mainlab_feature_listing',
  		'page arguments' => array(1,2,3),
  		'access arguments' => array('access content'),
  		'file' => 'includes/feature_listing.page.inc',
  		'type' => MENU_CALLBACK
  );
  // Switching page for the stock listing
  $items['stock_listing_page/%/%'] = array(
  		'page callback' => 'mainlab_stock_listing_switch_page',
  		'page arguments' => array(1,2),
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK
  );
  
  // The gene class browser
  $items['gene_class_listing'] = array(
  		'page callback' => 'mainlab_gene_class_listing_page',
  		'page arguments' => array(1),
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
  		'file' => 'includes/gene_class_listing.page.inc',
  );
  
  // The gene class page
  $items['gene_class'] = array(
  		'page callback' => 'mainlab_gene_class_page',
  		'page arguments' => array(1),
  		'access arguments' => array('access content'),
  		'type' => MENU_CALLBACK,
  		'file' => 'includes/gene_class.page.inc',
  );
  
  // Replicate Tripal Pub Search URLs
  $items['search/publications' ]= array(
      'title' => 'Publication Search',
      'description' => ('Search for publications'),
      'page callback' => 'tripal_pub_search_page',
      'access arguments' => array('access chado_pub content'),
      'type' => MENU_CALLBACK
  );  
  $items['search/publications/criteria/%/%'] = array(
      'page callback' => 'tripal_pub_search_page_update_criteria',
      'page arguments' => array(5, 6),
      'access arguments' => array('access chado_pub content'),
      'type ' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 *
 * @ingroup mainlab_qtl
 */
function mainlab_tripal_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    // Get the chado type
    $type = preg_replace('/^chado_/', '', $node->type);
    
    // Get available templates
    $templates = mainlab_tripal_get_templates (TRUE);
    $enabled_themes = variable_get('mainlab_tripal_enabled_themes', array());
    
    // Load appropriate templates for the node. Scan through all enabled mainlab templates.
    foreach ($templates AS $key => $template) {

      //The key is in format: mainlab_tripal--<sub_folder>--mainlab_<chado_type>_<*>
      if (preg_match('/^mainlab_tripal--.*?--mainlab_' . $type . '_/', $key) && $enabled_themes['templates--' . $type]) {
        
        $template = $templates[$key];
        $template_name = $template->name;
        
        $toc = '';
        
        // For chado_feature we want to match feature type (i.e. gene/mRNA/contig/QTL, etc.)
        if ($type == 'feature') {
          $featuretype = $node->feature->type_id->name;
          // Always show contact/references when available for features
          if ($template_name == 'mainlab_feature_contact') {
            $toc = 'Contact';
          }
          else if ($template_name == 'mainlab_feature_references') {
            $toc = 'References';
          }
          else if (preg_match('/mainlab_feature_' . $featuretype . '_/', $template_name)) {
            $toc = preg_replace('/mainlab_'. $type . '_' . $featuretype . '_/', '', $template_name);
          }
          else {
            // Skip the feature template if it does not match the naming scheme
            continue;
          }
          
        }
        else {
          $toc = preg_replace('/mainlab_'. $type . '_/', '', $template_name);
        }
        
        //dpm("$template->name (in '$template->folder' folder)"); // Show the template used
        
        // Initialize the content array
        $node->content[$template_name] = array();
        
        // Rewrite TOC for the base        
        if ($toc == 'base') {
          $node->content[$template_name]['#weight'] = -99;
          $toc = 'overview';
          switch ($type) {
            case 'organism':
              $toc = 'species_overview';
              break;
            case 'feature':
              $featuretype = $node->feature->type_id->name;
              switch ($featuretype) {
                case 'genetic_marker':
                  $toc = 'marker_overview';
                  break;
                case 'heritable_phenotypic_marker':
                  $toc = 'MTL_overview';
                  break;
                case 'QTL':
                  $toc = 'QTL_overview';
                  break;
                default:
                  $toc = $featuretype . '_overview';
              }
              break;
            case 'stock':
              $toc = 'germplasm_overview';
              break;
            case 'featuremap':
              $toc = 'map_overview';
              break;
            case 'eimage':
              $toc = 'image_overview';
              break;
            case 'nd_geolocation':
              $toc = 'environment_overview';
              break;
            case 'pub':
              $toc = 'publication_overview';
              break;
          }
        }
        
        // Attach theme to the content
        $node->content[$template_name]['#markup'] = theme($template_name,  array('node' => $node));
        $node->content[$template_name]['#tripal_toc_id']    = $toc;
        $node->content[$template_name]['#tripal_toc_title'] = ucwords(str_replace('_', ' ',$toc));
      }
    }
  }
  return;
}

/**
 * Implementation of hook_nodeapi().
 * 
 * @ingroup mainlab_qtl
 */
function mainlab_tripal_node_view_alter(&$build) {
  // Hide default templates in this function
  
  $node = $build['#node'];
  $enabled_themes = variable_get('mainlab_tripal_enabled_themes', array());
  
  // Organism
  if (property_exists($node, 'organism') && key_exists('templates--organism', $enabled_themes) && $enabled_themes['templates--organism']) {
    unset($build['tripal_organism_base']);
    unset($build['tripal_organism_stocks']);
    unset($build['tripal_organism_properties']);
  }
  
  // Analysis
  if (property_exists($node, 'analysis')) {
    $analysis = $build['#node']->analysis;
    $analysis = chado_expand_var($analysis, 'table', 'analysisprop', array('return_array' => TRUE));
    $is_genome = FALSE;
    if (property_exists($analysis, 'analysisprop')) {
      if (is_array($analysis->analysisprop)) {
        foreach ($analysis->analysisprop AS $prop) {
          if ($prop->type_id->name == 'Analysis Type') {
            $is_genome = $prop->value == 'whole_genome' ? TRUE : FALSE;
          }
        }
      }
    }
    // Genome
    if ($is_genome) {
      $build['tripal_analysis_base']['#tripal_toc_title'] = 'Genome Overview';
    }
  }
  
  //Feature
  if (property_exists($node, 'feature') && key_exists('templates--feature', $enabled_themes) && $enabled_themes['templates--feature']) {
    unset($build['tripal_feature_references']);
    switch ($node->feature->type_id->name) {
      // Use mainlab templates if it's enabled
      case 'genetic_marker':
        if ($enabled_themes['templates--genetic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_genotypes']);
          unset($build['tripal_feature_phenotypes']);
          unset($build['tripal_feature_nd_genotypes']);
          unset($build['tripal_feature_nd_phenotypes']);
          unset($build['tripal_feature_seqence']);
        }
        break;
        case 'sequence_feature':
        if ($enabled_themes['templates--genetic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_seqence']);
        }
        break;
      case 'QTL':
        if ($enabled_themes['templates--QTL']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_terms']);
        }
        break;
      case 'heritable_phenotypic_marker':
        if ($enabled_themes['templates--heritable_phenotypic_marker']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_properties']);
          unset($build['tripal_feature_terms']);
        }
        break;
      case 'haplotype_block':
        if ($enabled_themes['templates--haplotype_block']) {
          unset($build['tripal_feature_base']);
          unset($build['tripal_feature_genotypes']);
          unset($build['tripal_feature_phenotypes']);
          unset($build['tripal_feature_nd_genotypes']);
          unset($build['tripal_feature_nd_phenotypes']);
          unset($build['tripal_feature_relationships']);
        }
        break;
      // The following features use the default Tripal templates but we want to change the title
      case 'mRNA':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Transcript Overview';
        break;
      case 'gene':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Gene Overview';
        break;
      case 'EST':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'EST Overview';
        break;
      case 'contig':
        $build['tripal_feature_base']['#tripal_toc_title'] = 'Contig Overview';
        break;
    }
  }
  
  // Stock
  if (property_exists($node, 'stock') && key_exists('templates--stock', $enabled_themes) && $enabled_themes['templates--stock']) {
    unset($build['tripal_stock_base']);
    unset($build['tripal_stock_properties']);
    unset($build['tripal_stock_relationships']);
    unset($build['tripal_stock_references']);
    unset($build['tripal_stock_synonyms']);
    unset($build['tripal_stock_collections']);
    unset($build['tripal_stock_nd_genotypes']);
    unset($build['tripal_stock_nd_phenotypes']);
  }
  
  // Map
  if (property_exists($node, 'featuremap') && key_exists('templates--featuremap', $enabled_themes) && $enabled_themes['templates--featuremap']) {
    unset($build['tripal_featuremap_base']);
    unset($build['tripal_featuremap_properties']);
    unset($build['tripal_featuremap_featurepos']);
  }
  
  // Environment
  if (property_exists($node, 'nd_geolocation') && key_exists('templates--nd_geolocation', $enabled_themes) && $enabled_themes['templates--nd_geolocation']) {
    unset($build['tripal_nd_geolocation_base']);
  }
  //Eimage
  if (property_exists($node, 'eimage') && key_exists('templates--eimage', $enabled_themes) && $enabled_themes['templates--eimage']) {
    unset($build['tripal_eimage_base']);
  }
}


/**
 *  We need to let drupal know about our theme functions and their arguments.
 *  We create theme functions to allow users of the module to customize the
 *  look and feel of the output generated in this module
 *
 * @ingroup mainlab_tripal
 */
function mainlab_tripal_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'mainlab_tripal') . '/theme/';
  $core_path = drupal_get_path('module', 'tripal_core');
  
  // Load enabled templates
  $themes = array();
  $templates = mainlab_tripal_get_templates (TRUE);
  foreach ($templates AS $key => $file) {
      $themes[$file->name] = array(
        'variables' => array('node' => NULL),
        'template' => $file->name,
        'path' => $path . $file->folder,
      );
  }
  
  // nd_geolocation requires an extra template
  $themes['node__chado_nd_geolocation'] = array(
    'template' => 'node--chado-generic',
    'render element' => 'node',
    'base hook' => 'node',
    'path' => "$core_path/theme/templates",
  );
  return $themes;
}

/**
 * Return the site name
 * @return string:
 *  'gdr' for Rosaceae Genomic Database
 *  'cottongen' for CottonGen
 */
function mainlab_tripal_get_site () {
	global $base_url;
	if (preg_match('/rosaceae\.org/', $base_url) || preg_match('/rosaceae\.org/', $_SERVER['SERVER_NAME'])) {
		return 'gdr';
	} else if (preg_match('/cottongen\.org/', $base_url) || preg_match('/cottongen\.org/', $_SERVER['SERVER_NAME'])) {
		return 'cottongen';
	} else {
		return 'unknown';
	}
}
/**
 * Hook to Tripal Pub form to add a tutorial link
 * @param unknown $form
 * @param unknown $form_state
 */
function mainlab_tripal_form_tripal_pub_search_form_alter (&$form, &$form_state) {
  $tutorial = db_query("select pid from url_alias where alias = 'tutorial/publication_search'")->fetchField();
  if ($tutorial) {
    $val = $form['instructions']['#markup'];
    $form['instructions']['#markup'] = $val . "(<a href=\"/tutorial/publication_search\"><b>Help</b></a>)";
  }
}

/**
 * Get a list of PHP templates stored in the theme directory
 * 
 * @return stdClass[]
 * return an array of objects which has two properties: 'file' and 'folder'. The 'file' is the PHP 
 * file name without .tpl.php while the 'folder' is the path between 'theme' and the PHP file 
 * name without leading or trailing slash /. 
 * The array is keyed in the format of 'mainlab_tripal--$folder--$file->name'
 */
function mainlab_tripal_get_templates($enabled_only = FALSE) {
  // Get available templates
  $enabled_templates = variable_get('mainlab_tripal_enabled_templates', array());
  
  $theme = array ();
  $theme_path = drupal_get_path('module', 'mainlab_tripal') . '/theme';
  $templates = file_scan_directory($theme_path, '/\.tpl\.php/', array('recurse' => TRUE));
  
  foreach ($templates AS $path => $template) {
    $file = new stdClass();
    $file->name = str_replace('.tpl.php', '' , $template->filename);
    $folder = trim(str_replace(array($theme_path, $template->filename), array('', ''), $path), '/');
    if ($folder) {
      $file->folder = $folder;
      $key = 'mainlab_tripal--' . $folder.'--'. $file->name;
    }
    // Get only enabled tempaltes
    if ($enabled_only) {
      if (key_exists($key, $enabled_templates)) {
        $theme[$key] = $file;
      }
    }
    // Get akk templates
    else {
      $theme[$key] = $file;
    }
  }  
  ksort($theme);
  return $theme;
}

/**
 * Get a list of PHP preprocessors stored in the theme directory
 *
 */
function mainlab_tripal_get_preprocessors() {
  $theme = array ();
  $prep_path = drupal_get_path('module', 'mainlab_tripal') . '/theme/preprocessors';
  $preps = file_scan_directory($prep_path, '/\.prep\.inc/', array('recurse' => TRUE));
  return $preps;
}

// This is a function to convert a database resultset into an object array
function mainlab_tripal_dbresult_to_array($dbresult) {
  $arr = array();
  while ($obj = $dbresult->fetchObject()) {
    array_push($arr, $obj);
  }
  return $arr;
}
// The function will aggreate the content of a String array by using the specified separator
function mainlab_tripal_stringarray_agg($arr, $separator) {
  $text = "";
  for ($i = 0; $i < count($arr); $i ++) {
    $text .= $arr[$i];
    if ($i != count($arr) - 1) {
      $text .= $separator;
    }
  }
  return $text;
}
